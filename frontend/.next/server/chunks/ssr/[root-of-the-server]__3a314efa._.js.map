{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/auth.config.ts"],"sourcesContent":["import GoogleProvider from \"next-auth/providers/google\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport { debug } from \"console\";\n\nexport const authConfig: NextAuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    // error: \"/auth/error\",     // ðŸ‘ˆ optional\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  callbacks: {\n    async jwt({ token, user }) {\n      //when user logs in for the first time \n      console.log(\"JWT callback\", token, user);\n\n      if (user) {\n        // token.accessToken = account.access_token;\n        token.userId = user.id as string; // add id to the JWT\n        token.email = user.email as string;\n        token.name = user.name as string;\n      }\n      return token;\n    },\n    async session({ session, token }: any) {\n      // add id to the session object for NEXT.js usage\n      console.log(\"Session callback\", session, token);\n      if (session.user) {\n        session.userId = token.userId as string;\n        session.user.email = token.email as string;\n        session.user.name = token.name as string;\n      }\n      return session;\n    },\n  \n\n    //    async redirect() {\n    //   return `/dashboard`;\n    // }\n\n  },\n  debug:true,\n  \n  session: {\n    strategy: \"jwt\"\n  },\n}\n\n"],"names":[],"mappings":";;;AAAA;;AAIO,MAAM,aAA8B;IACzC,WAAW;QACT,CAAA,GAAA,mJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;IAEX;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,uCAAuC;YACvC,QAAQ,GAAG,CAAC,gBAAgB,OAAO;YAEnC,IAAI,MAAM;gBACR,4CAA4C;gBAC5C,MAAM,MAAM,GAAG,KAAK,EAAE,EAAY,oBAAoB;gBACtD,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAO;YACnC,iDAAiD;YACjD,QAAQ,GAAG,CAAC,oBAAoB,SAAS;YACzC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,MAAM,GAAG,MAAM,MAAM;gBAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IAOF;IACA,OAAM;IAEN,SAAS;QACP,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/components/DashboardClient.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/DashboardClient.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/DashboardClient.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/components/DashboardClient.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/DashboardClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/DashboardClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,6OAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}