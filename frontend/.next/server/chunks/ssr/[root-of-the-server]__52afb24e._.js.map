{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/auth.config.ts"],"sourcesContent":["import GoogleProvider from \"next-auth/providers/google\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport { debug } from \"console\";\n\nexport const authConfig: NextAuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    // error: \"/auth/error\",     // ðŸ‘ˆ optional\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  callbacks: {\n    async jwt({ token, user }) {\n      //when user logs in for the first time \n      console.log(\"JWT callback\", token, user);\n      if (user) {\n        token.userId = user.id; // add id to the JWT\n        token.email = user.email;\n        token.name = user.name;\n      }\n      return token;\n    },\n    async session({ session, token }: any) {\n      // add id to the session object for NEXT.js usage\n      console.log(\"Session callback\", session, token);\n      if (session.user) {\n        session.userId = token.userId;\n        session.user.email = token.email;\n        session.user.name = token.name;\n      }\n      return session;\n    },\n  \n\n    //    async redirect() {\n    //   return `/dashboard`;\n    // }\n\n  },\n  debug:true,\n  \n  // session: {\n  //   strategy: \"jwt\"\n  // },\n}\n\n"],"names":[],"mappings":";;;AAAA;;AAIO,MAAM,aAA8B;IACzC,WAAW;QACT,CAAA,GAAA,mJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;IAEX;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,uCAAuC;YACvC,QAAQ,GAAG,CAAC,gBAAgB,OAAO;YACnC,IAAI,MAAM;gBACR,MAAM,MAAM,GAAG,KAAK,EAAE,EAAE,oBAAoB;gBAC5C,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAO;YACnC,iDAAiD;YACjD,QAAQ,GAAG,CAAC,oBAAoB,SAAS;YACzC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,MAAM,GAAG,MAAM,MAAM;gBAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;YAChC;YACA,OAAO;QACT;IAOF;IACA,OAAM;AAKR","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/app/dashboard/page.tsx"],"sourcesContent":["\nimport { redirect } from \"next/navigation\"\n\n// onchange function\n\n\nimport { Expense } from \"@/types/userTypes\";\nimport { getServerSession } from \"next-auth\";\nimport { authConfig } from \"@/auth.config\";\n\nexport default async function Dashboard() {\n\n  // auth logic\n\n  const session =await getServerSession(authConfig);\n\n  \n\n  if (!session) redirect(\"//auth/sigin\");\n\n  let initialExpenses =[]\n  try{\n    const response = await fetch(`${process.env.NEXT_PUBLIC_SERVER_URL}/api/expenses`, {\n      headers: {\n        Authorization: `Bearer ${session?.user?.id}`\n      }\n    })\n    if(response.ok){\n      initialExpenses = await response.json()\n    }\n  }\n  catch(error){\n    console.log(\"Failed to fetch expenses\", error);\n  }\n\n\n  //toast\n\n\n\n  return \n}\n"],"names":[],"mappings":";;;AACA;AAAA;AAMA;AACA;;;;AAEe,eAAe;IAE5B,aAAa;IAEb,MAAM,UAAS,MAAM,CAAA,GAAA,qIAAA,CAAA,mBAAgB,AAAD,EAAE,qHAAA,CAAA,aAAU;IAIhD,IAAI,CAAC,SAAS,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAEvB,IAAI,kBAAiB,EAAE;IACvB,IAAG;QACD,MAAM,WAAW,MAAM,MAAM,6DAAsC,aAAa,CAAC,EAAE;YACjF,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,SAAS,MAAM,IAAI;YAC9C;QACF;QACA,IAAG,SAAS,EAAE,EAAC;YACb,kBAAkB,MAAM,SAAS,IAAI;QACvC;IACF,EACA,OAAM,OAAM;QACV,QAAQ,GAAG,CAAC,4BAA4B;IAC1C;IAGA,OAAO;IAIP;AACF","debugId":null}}]
}