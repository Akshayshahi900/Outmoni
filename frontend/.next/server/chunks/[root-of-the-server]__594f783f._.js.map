{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/auth.config.ts"],"sourcesContent":["import GoogleProvider from \"next-auth/providers/google\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport { debug } from \"console\";\nimport { UserRoundIcon } from \"lucide-react\";\n\nexport const authConfig: NextAuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    // error: \"/auth/error\",     // ðŸ‘ˆ optional\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  callbacks: {\n    async signIn({ user }) {\n\n\n      try {\n        console.log('NextAuth signIn - attempting to register user:', user);\n\n        const response = await fetch(`${process.env.NEXT_PUBLIC_SERVER_URL}/api/auth/register`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            googleId: user.id,\n            email: user.email,\n            name: user.name\n          })\n        });\n\n        const data = await response.json();\n        console.log('Registration response:', response.status, data);\n\n        if (!response.ok) {\n          console.error('Registration failed:', data);\n        }\n\n        return true;\n      } catch (error) {\n        console.error('Error registering user:', error);\n        return true; // Don't block login\n      }\n    },\n    async jwt({ token, user }) {\n      //when user logs in for the first time \n      console.log(\"JWT callback with token and user\", token, user);\n\n      if (user) {\n\n        // token.accessToken = user.token;\n        token.googleId = user.id;\n        token.userId = user.id as string; // add id to the JWT\n        token.email = user.email as string;\n        token.name = user.name as string;\n      }\n      return token;\n    },\n    async session({ session, token }: any) {\n      // add id to the session object for NEXT.js usage\n      console.log(\"Session callback\", session, token);\n      if (session.user) {\n        session.userId = token.userId as string;\n        session.user.email = token.email as string;\n        session.user.name = token.name as string;\n        session.accessToken = token;\n      }\n      return session;\n    },\n\n\n    //    async redirect() {\n    //   return `/dashboard`;\n    // }\n\n  },\n  debug: true,\n}\n\n"],"names":[],"mappings":";;;AAAA;;AAKO,MAAM,aAA8B;IACzC,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;QACR,SAAS;IAEX;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE;YAGnB,IAAI;gBACF,QAAQ,GAAG,CAAC,kDAAkD;gBAE9D,MAAM,WAAW,MAAM,MAAM,6DAAsC,kBAAkB,CAAC,EAAE;oBACtF,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBACnB,UAAU,KAAK,EAAE;wBACjB,OAAO,KAAK,KAAK;wBACjB,MAAM,KAAK,IAAI;oBACjB;gBACF;gBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;gBAChC,QAAQ,GAAG,CAAC,0BAA0B,SAAS,MAAM,EAAE;gBAEvD,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,QAAQ,KAAK,CAAC,wBAAwB;gBACxC;gBAEA,OAAO;YACT,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,OAAO,MAAM,oBAAoB;YACnC;QACF;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,uCAAuC;YACvC,QAAQ,GAAG,CAAC,oCAAoC,OAAO;YAEvD,IAAI,MAAM;gBAER,kCAAkC;gBAClC,MAAM,QAAQ,GAAG,KAAK,EAAE;gBACxB,MAAM,MAAM,GAAG,KAAK,EAAE,EAAY,oBAAoB;gBACtD,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,IAAI,GAAG,KAAK,IAAI;YACxB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAO;YACnC,iDAAiD;YACjD,QAAQ,GAAG,CAAC,oBAAoB,SAAS;YACzC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,MAAM,GAAG,MAAM,MAAM;gBAC7B,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;gBAChC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI;gBAC9B,QAAQ,WAAW,GAAG;YACxB;YACA,OAAO;QACT;IAOF;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///home/akshay/Code/Full%20stack/Finance/frontend/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authConfig } from \"@/auth.config\"; // âœ… Adjust this if you use baseUrl path alias\n\nconst handler = NextAuth(authConfig);\n\nexport { handler as GET, handler as POST };\n\n\n"],"names":[],"mappings":";;;;AAAA;AACA,gNAA4C,8CAA8C;;;AAE1F,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,uHAAA,CAAA,aAAU","debugId":null}}]
}